{"version":3,"sources":["utils/useResizeObserver.js","utils/CenteringDiv.js","utils/ResizeObserverWrapper.js","utils/ref-utils.js","App.js","serviceWorker.js","index.js"],"names":["useResizeObserver","callback","resizeObsRef","useRef","ResizeObserver","entries","boundingRect","target","getBoundingClientRect","width","height","useCallbackRef","useCallback","node","current","observe","unobserve","CenteringDiv","props","className","start","end","children","ResizeObserverWrapper","React","forwardRef","ref","onUpdate","cleanupOld","onNull","mergeRefs","refs","filteredRefs","filter","Boolean","length","inst","FreeQL","lazy","App","useState","headerHeight","setHeaderHeight","headerRef","footerHeight","setFooterHeight","footerRef","Navbar","expand","bg","variant","Brand","href","src","alt","Collapse","id","Nav","style","Link","fallback","Container","Row","Col","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","unstable_createRoot","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a20ae26.chunk.js","sourcesContent":["import { useRef, useCallback } from \"react\";\r\n\r\nimport { useCallbackRef } from \"./ref-utils\";\r\n\r\n\r\nconst useResizeObserver=(callback) =>{\r\n  const resizeObsRef=useRef(new ResizeObserver((entries) => {\r\n    const boundingRect=entries[0].target.getBoundingClientRect();\r\n    callback({width: boundingRect.width, height: boundingRect.height})\r\n  }));\r\n  return useCallbackRef(\r\n    useCallback((node) => {\r\n      resizeObsRef.current.observe(node)\r\n    }, [resizeObsRef]), \r\n    useCallback((node) => {\r\n      resizeObsRef.current.unobserve(node)\r\n    }, [resizeObsRef]),\r\n    useCallback(() => callback({width: 0, height: 0}), [callback])\r\n  );\r\n}\r\n  \r\nexport default useResizeObserver;","import React from 'react';\r\n\r\nconst CenteringDiv=(props) => {\r\n  return (\r\n    <div className={\"flex-\"+(props.start ? props.start+\"-\" : \"\")+\"grow-1 \"+(props.end ? \"flex-\"+props.end+\"-grow-0\" : \"\")}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\nexport default CenteringDiv;","import React from 'react';\r\n\r\nconst ResizeObserverWrapper=React.forwardRef((props, ref)=> {\r\n  return (\r\n    <div ref={ref} className=\"prevent-margin-collapse\">\r\n      {[props.children]}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ResizeObserverWrapper;","import { useCallback, useRef } from \"react\";\r\n\r\nconst useCallbackRef=(onUpdate , cleanupOld, onNull) => {\r\n  const ref = useRef(null)\r\n  const setRef = useCallback(node => {\r\n    if (ref.current) {\r\n      cleanupOld(ref.current);\r\n    }\r\n    \r\n    if (node) {\r\n      onUpdate(node)\r\n    } else {\r\n      onNull();\r\n    }\r\n    \r\n    ref.current = node\r\n  }, [cleanupOld, onUpdate, onNull])\r\n  \r\n  return setRef\r\n}\r\n\r\nconst mergeRefs = (...refs) => {\r\n  const filteredRefs = refs.filter(Boolean);\r\n  if (!filteredRefs.length) return null;\r\n  if (filteredRefs.length === 0) return filteredRefs[0];\r\n  return inst => {\r\n    for (const ref of filteredRefs) {\r\n      if (typeof ref === 'function') {\r\n        ref(inst);\r\n      } else if (ref) {\r\n        ref.current = inst;\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport {useCallbackRef, mergeRefs};","import React, { useState, useCallback, Suspense } from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport CenteringDiv from './utils/CenteringDiv.js';\r\nimport useResizeObserver from './utils/useResizeObserver.js';\r\nimport ResizeObserverWrapper from './utils/ResizeObserverWrapper.js';\r\n\r\nconst FreeQL = React.lazy(() => import(\"./FreeQL.js\"));\r\n\r\n//import FreeQL from \"./FreeQL.js\";\r\n\r\nfunction App() {\r\n  const [headerHeight, setHeaderHeight]=useState(0);\r\n  const headerRef=useResizeObserver(useCallback(({height}) => {setHeaderHeight(height)}, [setHeaderHeight]));\r\n  const [footerHeight, setFooterHeight]=useState(0);\r\n  const footerRef=useResizeObserver(useCallback(({height}) => {setFooterHeight(height)}, [setFooterHeight]));\r\n  return (\r\n    <>\r\n      <ResizeObserverWrapper ref={headerRef}>\r\n        <Navbar expand=\"sm\" bg=\"dark\" variant=\"dark\">\r\n          <CenteringDiv end=\"sm\">\r\n            <Navbar.Brand href=\"/\">\r\n              <img src=\"assets/img/logo.png\" width=\"65\" alt=\"FreeQL\"/>\r\n            </Navbar.Brand>\r\n          </CenteringDiv>\r\n          <Navbar.Brand href=\"/\">FreeQL</Navbar.Brand>\r\n          <CenteringDiv end=\"sm\"/>\r\n          <Navbar.Collapse id=\"navbarTogglerDemo02\">\r\n            <Nav className=\"mr-auto\" style={{\"fontSize\": \"1.025rem\"}}>\r\n              <Nav.Link href=\"https://stephmorel8910.gitbook.io/freeql/\" target=\"_blank\">Help</Nav.Link>\r\n              <Nav.Link href=\"https://github.com/SoAsEr/FreeQL/blob/master/README.md\" target=\"_blank\">README</Nav.Link>\r\n              <Nav.Link href=\"https://github.com/SoAsEr/FreeQL/\" target=\"_blank\">Github</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n      </ResizeObserverWrapper>\r\n      <Suspense fallback={<div style={{\"height\" : \"calc(100vh - \"+(headerHeight+footerHeight)+\"px)\"}}/>}>\r\n        <FreeQL headerHeight={headerHeight} footerHeight={footerHeight}/>\r\n      </Suspense>\r\n      <ResizeObserverWrapper ref={footerRef}>\r\n        <footer className=\"bg-dark p-4 p-md-5 text-center\">\r\n          <Container>\r\n            <Row>\r\n              <Col>\r\n                <span className=\"text-light\">Created by Stephane Morel</span>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </footer>\r\n      </ResizeObserverWrapper>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n/*\r\nReactDOM.render(\r\n  //<React.StrictMode>\r\n    <App />,\r\n  //</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n*/\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.unstable_createRoot(rootElement).render(<App />);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}