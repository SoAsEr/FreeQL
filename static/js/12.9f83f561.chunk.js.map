{"version":3,"sources":["utils/string-utils.js","features/components/useComponentSearchFilter.js","features/components/ComponentSelect.js","reusable_components/formatting/FormattedChemicalCompound.js"],"names":["stringMatchAllReplace","str","regex","replaceFunc","matches","matchAll","nextSubstrStart","strSoFar","match","substring","index","length","numberToExpWithTrailing","number","maxLength","minExp","pow10","Math","floor","abs","log10","toPrecision","toExponential","replace","chargeSignRegex","chargeSignSwitcher","groups","ChargeValue","ChargeSign","memoizedStringMatchAllReplace","memoize","useComponentSearchFilter","componentDB","useCallback","componentId","inputValue","componentName","components","get","name","toLowerCase","includes","ComponentSelect","dispatch","useDispatch","componentsPresent","useSelector","getComponentsPresent","getComponentDB","availableComponents","useMemo","Array","from","delete","waterValue","deleteAll","map","value","label","searchFilter","options","filterOption","option","searchValue","formatOptionLabel","createFormatOptionLabel","FormattedChemicalCompound","onChange","e","addComponents","React","memo","props","children","chargeValue","ChargeValue1","ChargeValue2","reduce","prev","curr","chargeSign","ChargeSign1","ChargeSign2","terminator","EndMatcher1","EndMatcher2","EndMatcher3","EndMatcher4","key","WordMatcher","SubMatcher"],"mappings":"mLAAMA,EAAsB,SAACC,EAAKC,EAAOC,GACvC,IADuD,EACjDC,EAAQH,EAAII,SAASH,GACvBI,EAAgB,EAChBC,EAAS,GAH0C,cAIpCH,GAJoC,IAIvD,IAAI,EAAJ,qBAA2B,CAAC,IAAlBI,EAAiB,QACzBD,GAAUN,EAAIQ,UAAUH,EAAiBE,EAAME,OAC/CH,GAAUJ,EAAYK,GACtBF,EAAgBE,EAAME,MAAMF,EAAMG,QAPmB,8BAUvD,OADAJ,GAAUN,EAAIQ,UAAUH,IAYpBM,EAAwB,SAACC,EAAQC,GAA0B,IAAfC,EAAc,uDAAP,EACjDC,EAAMC,KAAKC,MAAMD,KAAKE,IAAIF,KAAKG,MAAMP,KAC3C,OAAGG,EAAMD,EACAF,EAAOQ,YAAYP,GAEnBD,EAAOS,cAAcR,EAAU,GAAGS,QAAQ,MAAO,O,+ECrBtDC,EAAe,YAAC,0GAAD,oDACfC,EAAmB,SAACjB,GAAD,OAAWA,EAAMkB,OAAOC,YAAYnB,EAAMkB,OAAOE,YACpEC,EAA8BC,IAAQ9B,KAQ7B+B,IAPgB,SAACC,GAC9B,OAAOC,uBAAY,SAACC,EAAaC,GAC/B,IAAMC,EAAcJ,EAAYK,WAAWC,IAAIJ,GAAaK,KAC5D,OAAOH,EAAcI,cAAcC,SAASN,EAAWK,gBAAkBX,EAA8BO,EAAeZ,EAAiBC,GAAoBe,cAAcC,SAASN,EAAWK,iBAC7L,CAACR,M,+HCuBUU,UApBO,WACpB,IAAMC,EAASC,cACTC,EAAkBC,YAAYC,KAC9Bf,EAAYc,YAAYE,KACxBC,EAAoBC,mBAAQ,kBAAMC,MAAMC,KAAKpB,EAAYK,WAC5DgB,OAAOrB,EAAYsB,YACnBC,UAAUV,IACVW,KAAI,yCAAmC,CAACC,MAApC,KAAwDC,MAAxD,KAA6EnB,WAClF,CAACP,EAAaa,IACVc,EAAa5B,YAAyBC,GAE5C,OACE,kBAAC,IAAD,CACE4B,QAASX,EACTY,aAAc,SAACC,EAAQC,GAAT,OAAyBJ,EAAaG,EAAOL,MAAOM,IAClEC,kBAAmBC,YAAwBC,KAC3CC,SAAUlC,uBAAY,SAACmC,GAAUA,GAAIzB,EAAS0B,YAAc,CAACD,EAAEX,WAAY,CAACd,IAAYc,MAAM,O,4DC7B9FS,EAA0BI,IAAMC,MAAK,SAACC,GAW1C,IAAMtE,EAAK,YAAC,qdAAD,uKAEX,OACE,wBAASsE,EACJrB,MAAMC,KAAKoB,EAAMC,SAASpE,SAASH,IAAQsD,KAAI,SAAChD,GAC/C,IAAMkE,EAAY,CAAClE,EAAMkB,OAAOiD,aAAcnE,EAAMkB,OAAOkD,cAAcC,QAAO,SAACC,EAAMC,GAAP,OAAgBA,GAAcD,IAAM,IAC9GE,EAAW,CAACxE,EAAMkB,OAAOuD,YAAazE,EAAMkB,OAAOwD,aAAaL,QAAO,SAACC,EAAMC,GAAP,OAAgBA,GAAcD,IAAM,IAC3GK,EAAW,CAAC3E,EAAMkB,OAAO0D,YAAa5E,EAAMkB,OAAO2D,YAAa7E,EAAMkB,OAAO4D,YAAa9E,EAAMkB,OAAO6D,aAAaV,QAAO,SAACC,EAAMC,GAAP,OAAgBA,GAAcD,IAAM,IACrK,OACE,0BAAMU,IAAKhB,EAAMC,SAAShE,UAAU,EAAGD,EAAME,QAC1CF,EAAMkB,OAAO+D,YAAY,6BAAMjF,EAAMkB,OAAOgE,YAAiB,6BAAMhB,EAAaM,GAAkBG,UAQlGjB","file":"static/js/12.9f83f561.chunk.js","sourcesContent":["const stringMatchAllReplace=(str, regex, replaceFunc) => {\r\n  const matches=str.matchAll(regex);\r\n  let nextSubstrStart=0;\r\n  let strSoFar=\"\"\r\n  for(const match of matches){\r\n    strSoFar+=str.substring(nextSubstrStart, match.index);\r\n    strSoFar+=replaceFunc(match);\r\n    nextSubstrStart=match.index+match.length;\r\n  }\r\n  strSoFar+=str.substring(nextSubstrStart);\r\n  return strSoFar;\r\n};\r\n\r\nconst numberToExpNoTrailing=(number, maxLength, minExp=2 ) => {\r\n  const pow10=Math.floor(Math.abs(Math.log10(number)));\r\n  if(pow10<minExp){\r\n    return number.toPrecision(maxLength).replace(/(\\.\\d*?)0+$/,'$1').replace(/\\.$/, '');\r\n  } else {\r\n    return number.toExponential(maxLength-1).replace(/(\\.\\d*?)0+e/,'$1e').replace(/\\.e/, 'e').replace(/e\\+/, \"e\");\r\n  }\r\n}\r\nconst numberToExpWithTrailing=(number, maxLength, minExp=2 ) => {\r\n  const pow10=Math.floor(Math.abs(Math.log10(number)));\r\n  if(pow10<minExp){\r\n    return number.toPrecision(maxLength)\r\n  } else {\r\n    return number.toExponential(maxLength-1).replace(/e\\+/, \"e\");\r\n  }\r\n}\r\n\r\nexport { stringMatchAllReplace, numberToExpWithTrailing, numberToExpNoTrailing };","import { useCallback } from \"react\";\r\n\r\nimport memoize from 'fast-memoize';\r\nimport { stringMatchAllReplace } from \"../../utils/string-utils.js\";\r\n\r\nconst chargeSignRegex=/(?<Charge>(?<ChargeSign>[+-])(?:(?:1|(?<ChargeValue>[2-9]))|(?<EndMatcher>$|[:\\s])))/g;\r\nconst chargeSignSwitcher=(match) => match.groups.ChargeValue+match.groups.ChargeSign;\r\nconst memoizedStringMatchAllReplace=memoize(stringMatchAllReplace);\r\nconst useComponentSearchFilter=(componentDB) => {\r\n  return useCallback((componentId, inputValue) => {\r\n    const componentName=componentDB.components.get(componentId).name;\r\n    return componentName.toLowerCase().includes(inputValue.toLowerCase()) || memoizedStringMatchAllReplace(componentName, chargeSignRegex, chargeSignSwitcher).toLowerCase().includes(inputValue.toLowerCase());\r\n  },[componentDB]);\r\n};\r\n\r\nexport default useComponentSearchFilter;","import React, { useCallback,  useMemo } from 'react';\r\n\r\n\r\nimport VirtualizedSelect from \"react-select-virtualized\";\r\n\r\nimport useComponentSearchFilter from \"./useComponentSearchFilter.js\"\r\n\r\nimport { createFormatOptionLabel } from '../../utils/react-select-utils.js';\r\n\r\nimport FormattedChemicalCompound from \"../../reusable_components/formatting/FormattedChemicalCompound.js\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addComponents, getComponentDB, getComponentsPresent } from './componentsSlice.js';\r\n\r\n\r\nconst ComponentSelect=() => {  \r\n  const dispatch=useDispatch();\r\n  const componentsPresent=useSelector(getComponentsPresent);\r\n  const componentDB=useSelector(getComponentDB);\r\n  const availableComponents=useMemo(() => Array.from(componentDB.components\r\n    .delete(componentDB.waterValue)\r\n    .deleteAll(componentsPresent))\r\n    .map(([componentId, componentData]) => ({value: componentId, label: componentData.name}))\r\n  , [componentDB, componentsPresent]);\r\n  const searchFilter=useComponentSearchFilter(componentDB);\r\n\r\n  return(\r\n    <VirtualizedSelect\r\n      options={availableComponents}\r\n      filterOption={(option, searchValue) => searchFilter(option.value, searchValue)}\r\n      formatOptionLabel={createFormatOptionLabel(FormattedChemicalCompound)}\r\n      onChange={useCallback((e) => {if(e) {dispatch(addComponents([e.value]))}}, [dispatch])} value=\"\"/>\r\n  )\r\n};\r\n\r\nexport default ComponentSelect;","import React from \"react\";\r\n\r\nconst FormattedChemicalCompound=React.memo((props) => {\r\n  /*\r\n  WordMatcher=(.*?[^0-9\\[\\(])\r\n  SubMatcher=([0-9])\r\n  EndMatcher=([$\\s])\r\n  SupMatcher=([+-])(?:(?:1|([2-9]))|{EndMatcher})\r\n  WholeExp={WordMatcher}(?:{EndMatcher}|{SubMatcher}{SupMatcher}?|{SupMatcher})\r\n  (WordMatcher[0])_(SubMatcher[0])^(SupMatcher[1]SupMatcher[0])EndMatcher[0]\r\n  That would only work with ruby where the capture groups are changed on every recursion\r\n  */\r\n  //https://regex101.com/r/POrbvL/4\r\n  const regex=/(?<WordMatcher>.*?[^0-9[(\\s])(?:(?<EndMatcher1>$|[:.\\s])|(?<Charge1>(?<ChargeSign1>[+-])(?:(?:1|(?<ChargeValue1>[2-9]))|(?<EndMatcher2>$|[:.\\s])))|(?<SubMatcher>[0-9]+)(?<Charge2>(?<ChargeSign2>[+-])(?:(?:1|(?<ChargeValue2>[2-9]))|(?<EndMatcher3>$|[:.\\s])))?)(?<EndMatcher4>$|[:.\\s])?/g;\r\n  //$<WordMatcher>_($<SubMatcher>)^($<ChargeValue1>$<ChargeValue2>$<ChargeSign1>$<ChargeSign2>)$<EndMatcher1>$<EndMatcher2>$<EndMatcher3>\r\n  return(\r\n    <div {...props}>\r\n        {Array.from(props.children.matchAll(regex)).map((match) => {\r\n          const chargeValue=[match.groups.ChargeValue1, match.groups.ChargeValue2].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          const chargeSign=[match.groups.ChargeSign1, match.groups.ChargeSign2].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          const terminator=[match.groups.EndMatcher1, match.groups.EndMatcher2, match.groups.EndMatcher3, match.groups.EndMatcher4].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          return (\r\n            <span key={props.children.substring(0, match.index)}>\r\n              {match.groups.WordMatcher}<sub>{match.groups.SubMatcher}</sub><sup>{chargeValue}{chargeSign}</sup>{terminator}\r\n            </span>\r\n          );\r\n        })\r\n        }\r\n    </div>\r\n  );\r\n});\r\nexport default FormattedChemicalCompound;"],"sourceRoot":""}