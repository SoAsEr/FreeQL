{"version":3,"sources":["component_groups/Result.js","utils/array-utils.js","formatting/FormattedChemicalCompound.js","utils/string-utils.js"],"names":["ConcentrationTable","React","memo","props","currentResult","style","className","columns","useMemo","Header","id","accessor","name","FormattedChemicalCompound","conc","numberToExpWithTrailing","Math","log10","data","Immutable","components","aqs","solidsPresent","flatten","console","log","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","borderLengths","array","size","reduce","r","a","push","length","filter","item","Table","bordered","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","CellType","getCellProps","has","TotalConcentrationTable","totalConc","SolublilityProductTable","solidsNotPresent","solubilityProduct","ResultTables","ResultError","message","Results","Error","regex","Array","from","children","matchAll","match","chargeValue","groups","ChargeValue1","ChargeValue2","prev","curr","chargeSign","ChargeSign1","ChargeSign2","terminator","EndMatcher1","EndMatcher2","EndMatcher3","EndMatcher4","key","substring","index","WordMatcher","SubMatcher","stringMatchAllReplace","str","replaceFunc","matches","nextSubstrStart","strSoFar","number","maxLength","minExp","pow10","floor","abs","toPrecision","toExponential","replace"],"mappings":"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","file":"static/js/13.b906906f.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport * as Immutable from \"immutable\";\r\nimport { useTable } from \"react-table\";\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nimport { numberToExpWithTrailing } from \"../utils/string-utils.js\"\r\nimport { cumulativeSum } from \"../utils/array-utils.js\";\r\nimport FormattedChemicalCompound from \"../formatting/FormattedChemicalCompound.js\";\r\n\r\nconst ConcentrationTable=React.memo((props) => {\r\n  const { currentResult, style, className } = props;\r\n  const columns=useMemo(() => [\r\n    {\r\n      Header: \"Species\",\r\n      id: \"name\",\r\n      accessor: ([id, {name}]) => <FormattedChemicalCompound>{name}</FormattedChemicalCompound>\r\n    },\r\n    {\r\n      Header: \"Conc\",\r\n      id: \"conc\",\r\n      accessor: ([id, {conc}]) => numberToExpWithTrailing(conc, 4)\r\n    },\r\n    {\r\n      Header: () => <>&minus;log(Conc)</>,\r\n      id: \"negLogConc\",\r\n      accessor: ([id, {conc}]) => numberToExpWithTrailing(-Math.log10(conc), 4)\r\n    },\r\n  ], [])\r\n\r\n  const data=useMemo(() => Immutable.List([\r\n    Immutable.List(currentResult().components),\r\n    Immutable.List(currentResult().aqs),\r\n    Immutable.List(currentResult().solidsPresent),\r\n  ]).flatten(true), [currentResult]);\r\n  console.log(data);\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns,\r\n    data,\r\n  });\r\n\r\n  const borderLengths=useMemo(() => Immutable.Set(cumulativeSum([currentResult().components.size, currentResult().aqs.size, currentResult().solidsPresent.size])).filter(item => item!==data.size && item!==0), [currentResult, data.size]);\r\n  return (\r\n    <Table bordered {...getTableProps({style, className})}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                const CellType=cell.column.id===\"name\" ? \"th\" : \"td\";\r\n                return <CellType {...cell.getCellProps(borderLengths.has(i+1) ? {style : {\"borderBottom\": \"3px solid #dee2e6\"}} : {})}>{cell.render('Cell')}</CellType>;\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n});\r\n\r\nconst TotalConcentrationTable=React.memo((props) => {\r\n\r\n  const {currentResult, style, className} = props;\r\n\r\n  const columns=useMemo(() => [\r\n    {\r\n      Header: \"Component\",\r\n      id: \"name\",\r\n      accessor: ([id, {name}]) => <FormattedChemicalCompound>{name}</FormattedChemicalCompound>\r\n    },\r\n    {\r\n      Header: \"Calculated Total Conc\",\r\n      id: \"totalConc\",\r\n      accessor: ([id, {totalConc}]) => numberToExpWithTrailing(totalConc, 4)\r\n    },\r\n  ], []);\r\n\r\n  const data=useMemo(() => Immutable.List(currentResult().components), [currentResult]);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns,\r\n    data,\r\n  });\r\n\r\n  return (\r\n    <Table bordered {...getTableProps({style, className})}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                const CellType=cell.column.id===\"name\" ? \"th\" : \"td\";\r\n                return <CellType {...cell.getCellProps()}>{cell.render('Cell')}</CellType>;\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n});\r\n\r\nconst SolublilityProductTable=React.memo((props) => {\r\n  const {currentResult, style, className} = props;\r\n\r\n  if(!currentResult().solidsNotPresent.size){\r\n    return <></>;\r\n  }\r\n  \r\n  const columns=useMemo(() => [\r\n    {\r\n      Header: \"Solid\",\r\n      id: \"name\",\r\n      accessor: ([id, {name}]) => <FormattedChemicalCompound>{name}</FormattedChemicalCompound>\r\n    },\r\n    {\r\n      Header: \"Solubility Product\",\r\n      id: \"solProd\",\r\n      accessor: ([id, {solubilityProduct}]) => numberToExpWithTrailing(solubilityProduct, 4)\r\n    },\r\n  ], []);\r\n\r\n  const data=useMemo(() => Immutable.List(currentResult().solidsNotPresent), [currentResult]);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns,\r\n    data,\r\n  });\r\n\r\n  return (\r\n    <Table bordered {...getTableProps({style, className})}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                const CellType=cell.column.id===\"name\" ? \"th\" : \"td\";\r\n                return <CellType {...cell.getCellProps()}>{cell.render('Cell')}</CellType>;\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n});\r\n\r\nconst ResultTables=React.memo((props) => {\r\n  return (\r\n    <>\r\n      <ConcentrationTable currentResult={props.currentResult} className=\"mb-4 lc-mb-0\"/>\r\n      <TotalConcentrationTable currentResult={props.currentResult} className=\"mb-4 lc-mb-0\"/>\r\n      <SolublilityProductTable currentResult={props.currentResult} className=\"mb-4 lc-mb-0\"/>\r\n    </>\r\n  );\r\n});\r\n\r\nconst ResultError=React.memo((props) => {\r\n  const {currentResult} = props;\r\n  return <>{\"Error: \"+currentResult().message}</>;\r\n});\r\n\r\n\r\nconst Results = React.memo((props) => {\r\n  const { currentResult } = props;\r\n  console.log(currentResult())\r\n  if(currentResult() instanceof Error){\r\n    return <ResultError currentResult={currentResult}/>;\r\n  } else {\r\n    return <ResultTables currentResult={currentResult}/>;\r\n  }\r\n});\r\nexport default Results;  ","const cumulativeSum = (array) => {\r\n  return array.reduce((r, a) => {\r\n    r.push(((r.length && r[r.length - 1]) || 0) + a);\r\n    return r;\r\n  }, []);\r\n};\r\n\r\nexport {cumulativeSum};","import React from \"react\";\r\n\r\nconst FormattedChemicalCompound=React.memo((props) => {\r\n  /*\r\n  WordMatcher=(.*?[^0-9\\[\\(])\r\n  SubMatcher=([0-9])\r\n  EndMatcher=([$\\s])\r\n  SupMatcher=([+-])(?:(?:1|([2-9]))|{EndMatcher})\r\n  WholeExp={WordMatcher}(?:{EndMatcher}|{SubMatcher}{SupMatcher}?|{SupMatcher})\r\n  (WordMatcher[0])_(SubMatcher[0])^(SupMatcher[1]SupMatcher[0])EndMatcher[0]\r\n  That would only work with ruby where the capture groups are changed on every recursion\r\n  */\r\n  //https://regex101.com/r/POrbvL/4\r\n  const regex=/(?<WordMatcher>.*?[^0-9[(\\s])(?:(?<EndMatcher1>$|[:.\\s])|(?<Charge1>(?<ChargeSign1>[+-])(?:(?:1|(?<ChargeValue1>[2-9]))|(?<EndMatcher2>$|[:.\\s])))|(?<SubMatcher>[0-9]+)(?<Charge2>(?<ChargeSign2>[+-])(?:(?:1|(?<ChargeValue2>[2-9]))|(?<EndMatcher3>$|[:.\\s])))?)(?<EndMatcher4>$|[:.\\s])?/g;\r\n  //$<WordMatcher>_($<SubMatcher>)^($<ChargeValue1>$<ChargeValue2>$<ChargeSign1>$<ChargeSign2>)$<EndMatcher1>$<EndMatcher2>$<EndMatcher3>\r\n  return(\r\n    <div {...props}>\r\n        {Array.from(props.children.matchAll(regex)).map((match) => {\r\n          const chargeValue=[match.groups.ChargeValue1, match.groups.ChargeValue2].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          const chargeSign=[match.groups.ChargeSign1, match.groups.ChargeSign2].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          const terminator=[match.groups.EndMatcher1, match.groups.EndMatcher2, match.groups.EndMatcher3, match.groups.EndMatcher4].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          return (\r\n            <span key={props.children.substring(0, match.index)}>\r\n              {match.groups.WordMatcher}<sub>{match.groups.SubMatcher}</sub><sup>{chargeValue}{chargeSign}</sup>{terminator}\r\n            </span>\r\n          );\r\n        })\r\n        }\r\n    </div>\r\n  );\r\n});\r\nexport default FormattedChemicalCompound;","const stringMatchAllReplace=(str, regex, replaceFunc) => {\r\n  const matches=str.matchAll(regex);\r\n  let nextSubstrStart=0;\r\n  let strSoFar=\"\"\r\n  for(const match of matches){\r\n    strSoFar+=str.substring(nextSubstrStart, match.index);\r\n    strSoFar+=replaceFunc(match);\r\n    nextSubstrStart=match.index+match.length;\r\n  }\r\n  strSoFar+=str.substring(nextSubstrStart);\r\n  return strSoFar;\r\n};\r\n\r\nconst numberToExpNoTrailing=(number, maxLength, minExp=2 ) => {\r\n  const pow10=Math.floor(Math.abs(Math.log10(number)));\r\n  if(pow10<minExp){\r\n    return number.toPrecision(maxLength).replace(/(\\.\\d*?)0+$/,'$1').replace(/\\.$/, '');\r\n  } else {\r\n    return number.toExponential(maxLength-1).replace(/(\\.\\d*?)0+e/,'$1e').replace(/\\.e/, 'e').replace(/e\\+/, \"e\");\r\n  }\r\n}\r\nconst numberToExpWithTrailing=(number, maxLength, minExp=2 ) => {\r\n  const pow10=Math.floor(Math.abs(Math.log10(number)));\r\n  if(pow10<minExp){\r\n    return number.toPrecision(maxLength)\r\n  } else {\r\n    return number.toExponential(maxLength-1).replace(/e\\+/, \"e\");\r\n  }\r\n}\r\n\r\nexport { stringMatchAllReplace, numberToExpWithTrailing, numberToExpNoTrailing };"],"sourceRoot":""}