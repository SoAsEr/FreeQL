{"version":3,"sources":["utils/CenteringDiv.js","utils/useWindowSize.js","App.js","serviceWorker.js","index.js"],"names":["CenteringDiv","props","className","start","end","children","useWindowSize","useState","width","window","innerWidth","height","innerHeight","windowSize","setWindowSize","useLayoutEffect","handleResize","addEventListener","removeEventListener","FreeQL","React","lazy","App","footerHeight","Navbar","expand","bg","variant","Brand","href","src","alt","Collapse","id","Nav","style","Link","target","fallback","headerHeight","Container","Row","Col","Boolean","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGAAA,oBASeA,IAPI,SAACC,GAClB,OACE,yBAAKC,UAAW,SAASD,EAAME,MAAQF,EAAME,MAAM,IAAM,IAAI,WAAWF,EAAMG,IAAM,QAAQH,EAAMG,IAAI,UAAY,KAC/GH,EAAMI,Y,mDC0BEC,IA5BK,WAAM,MAGYC,mBAAS,CAC3CC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cALO,mBAGjBC,EAHiB,KAGLC,EAHK,KAyBxB,OAjBAC,2BAAgB,WAEb,IAAMC,EAAa,WAElBF,EAAc,CACZN,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,eAQnB,OAHAH,OAAOQ,iBAAiB,SAAUD,GAG3B,kBAAMP,OAAOS,oBAAoB,SAAUF,MACjD,IAEIH,I,oMClBHM,EAASC,IAAMC,MAAK,kBAAM,wDAyCjBC,MAvCf,WACE,IAEMC,EAFWjB,cAEaE,OAAO,IAAM,IAAM,GACjD,OACE,oCACE,kBAACgB,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACpC,kBAAC3B,EAAA,EAAD,CAAcI,IAAI,MAChB,kBAACoB,EAAA,EAAOI,MAAR,CAAcC,KAAK,KACjB,yBAAKC,IAAI,sBAAsBtB,MAAM,KAAKuB,IAAI,aAGlD,kBAACP,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,UACA,kBAAC7B,EAAA,EAAD,CAAcI,IAAI,OAClB,kBAACoB,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,uBAClB,kBAACC,EAAA,EAAD,CAAKhC,UAAU,UAAUiC,MAAO,CAAC,SAAY,aAC3C,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,4CAA4CQ,OAAO,UAAlE,QACA,kBAACH,EAAA,EAAIE,KAAL,CAAUP,KAAK,yDAAyDQ,OAAO,UAA/E,UACA,kBAACH,EAAA,EAAIE,KAAL,CAAUP,KAAK,oCAAoCQ,OAAO,UAA1D,aAIN,kBAAC,WAAD,CAAUC,SAAU,yBAAKH,MAAO,CAAC,OAAW,iBApB7B,GAoB2DZ,GAAc,UACtF,kBAACJ,EAAD,CAAQoB,aArBK,GAqBuBhB,aAAcA,KAEpD,4BAAQrB,UAAU,kCAChB,kBAACsC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,0BAAMxC,UAAU,cAAhB,mCC7BMyC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCLN,IAAMC,EAASC,SAASC,eAAe,QACvCC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GDqHnB,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.635d37b0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CenteringDiv=(props) => {\r\n  return (\r\n    <div className={\"flex-\"+(props.start ? props.start+\"-\" : \"\")+\"grow-1 \"+(props.end ? \"flex-\"+props.end+\"-grow-0\" : \"\")}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\nexport default CenteringDiv;","import { useState, useLayoutEffect } from \"react\";\r\n\r\n\r\nconst useWindowSize=() => {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  useLayoutEffect(() => {\r\n    // Handler to call on window resize\r\n     const handleResize=()=>{\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    \r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n    \r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n\r\n  return windowSize;\r\n}\r\n\r\nexport default useWindowSize;","import React, { useState, useCallback, Suspense } from 'react';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport CenteringDiv from './utils/CenteringDiv.js';\r\nimport useWindowSize from './utils/useWindowSize.js';\r\n\r\nconst FreeQL = React.lazy(() => import(\"./FreeQL.js\"));\r\n\r\nfunction App() {\r\n  const windowSize=useWindowSize();\r\n  const headerHeight=56;\r\n  const footerHeight=windowSize.width>=768 ? 120 : 72;\r\n  return (\r\n    <>\r\n      <Navbar expand=\"sm\" bg=\"dark\" variant=\"dark\">\r\n        <CenteringDiv end=\"sm\">\r\n          <Navbar.Brand href=\"/\">\r\n            <img src=\"assets/img/logo.png\" width=\"65\" alt=\"FreeQL\"/>\r\n          </Navbar.Brand>\r\n        </CenteringDiv>\r\n        <Navbar.Brand href=\"/\">FreeQL</Navbar.Brand>\r\n        <CenteringDiv end=\"sm\"/>\r\n        <Navbar.Collapse id=\"navbarTogglerDemo02\">\r\n          <Nav className=\"mr-auto\" style={{\"fontSize\": \"1.025rem\"}}>\r\n            <Nav.Link href=\"https://stephmorel8910.gitbook.io/freeql/\" target=\"_blank\">Help</Nav.Link>\r\n            <Nav.Link href=\"https://github.com/SoAsEr/FreeQL/blob/master/README.md\" target=\"_blank\">README</Nav.Link>\r\n            <Nav.Link href=\"https://github.com/SoAsEr/FreeQL/\" target=\"_blank\">Github</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      <Suspense fallback={<div style={{\"height\" : \"calc(100vh - \"+(headerHeight+footerHeight)+\"px)\"}}/>}>\r\n        <FreeQL headerHeight={headerHeight} footerHeight={footerHeight}/>\r\n      </Suspense>\r\n      <footer className=\"bg-dark p-4 p-md-5 text-center\">\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"text-light\">Created by Stephane Morel</span>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </footer>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n/*\r\nReactDOM.render(\r\n  //<React.StrictMode>\r\n    <App />,\r\n  //</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n*/\r\nconst rootEl = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootEl);\r\n//ReactDOM.unstable_createRoot(rootEl).render(<App />);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}