{"version":3,"sources":["formatting/FormattedChemicalCompound.js","utils/string-utils.js","component_groups/components/hooks/useComponentSearchFilter.js","component_groups/components/ComponentSelectModal.js"],"names":["FormattedChemicalCompound","React","memo","props","regex","Array","from","children","matchAll","map","match","chargeValue","groups","ChargeValue1","ChargeValue2","reduce","prev","curr","chargeSign","ChargeSign1","ChargeSign2","terminator","EndMatcher1","EndMatcher2","EndMatcher3","EndMatcher4","key","substring","index","WordMatcher","SubMatcher","stringMatchAllReplace","str","replaceFunc","matches","nextSubstrStart","strSoFar","length","numberToExpWithTrailing","number","maxLength","minExp","pow10","Math","floor","abs","log10","toPrecision","toExponential","replace","chargeSignRegex","chargeSignSwitcher","ChargeValue","ChargeSign","memoizedStringMatchAllReplace","memoize","useComponentSearchFilter","componentsDB","useCallback","componentId","inputValue","componentName","components","get","name","toLowerCase","includes","ComponentSelectModal","componentsPresent","addComponents","windowHeight","useState","modalIsOpen","setModalIsOpen","Immutable","componentsStaged","setComponentsStaged","searchValue","setSearchValue","searchFilter","componentsFiltered","useMemo","filter","componentData","component","reset","className","style","onClick","width","viewBox","fill","xmlns","fillRule","d","show","onHide","Header","closeButton","Body","Prepend","Text","height","Control","placeholder","value","onChange","e","target","disableHeight","rowHeight","overscanRowCount","rowRenderer","isStaged","delete","add","variant","size","rowCount","Footer"],"mappings":"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","file":"static/js/10.8f0c23c3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FormattedChemicalCompound=React.memo((props) => {\r\n  /*\r\n  WordMatcher=(.*?[^0-9\\[\\(])\r\n  SubMatcher=([0-9])\r\n  EndMatcher=([$\\s])\r\n  SupMatcher=([+-])(?:(?:1|([2-9]))|{EndMatcher})\r\n  WholeExp={WordMatcher}(?:{EndMatcher}|{SubMatcher}{SupMatcher}?|{SupMatcher})\r\n  (WordMatcher[0])_(SubMatcher[0])^(SupMatcher[1]SupMatcher[0])EndMatcher[0]\r\n  That would only work with ruby where the capture groups are changed on every recursion\r\n  */\r\n  //https://regex101.com/r/POrbvL/4\r\n  const regex=/(?<WordMatcher>.*?[^0-9[(\\s])(?:(?<EndMatcher1>$|[:.\\s])|(?<Charge1>(?<ChargeSign1>[+-])(?:(?:1|(?<ChargeValue1>[2-9]))|(?<EndMatcher2>$|[:.\\s])))|(?<SubMatcher>[0-9]+)(?<Charge2>(?<ChargeSign2>[+-])(?:(?:1|(?<ChargeValue2>[2-9]))|(?<EndMatcher3>$|[:.\\s])))?)(?<EndMatcher4>$|[:.\\s])?/g;\r\n  //$<WordMatcher>_($<SubMatcher>)^($<ChargeValue1>$<ChargeValue2>$<ChargeSign1>$<ChargeSign2>)$<EndMatcher1>$<EndMatcher2>$<EndMatcher3>\r\n  return(\r\n    <div {...props}>\r\n        {Array.from(props.children.matchAll(regex)).map((match) => {\r\n          const chargeValue=[match.groups.ChargeValue1, match.groups.ChargeValue2].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          const chargeSign=[match.groups.ChargeSign1, match.groups.ChargeSign2].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          const terminator=[match.groups.EndMatcher1, match.groups.EndMatcher2, match.groups.EndMatcher3, match.groups.EndMatcher4].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          return (\r\n            <span key={props.children.substring(0, match.index)}>\r\n              {match.groups.WordMatcher}<sub>{match.groups.SubMatcher}</sub><sup>{chargeValue}{chargeSign}</sup>{terminator}\r\n            </span>\r\n          );\r\n        })\r\n        }\r\n    </div>\r\n  );\r\n});\r\nexport default FormattedChemicalCompound;","const stringMatchAllReplace=(str, regex, replaceFunc) => {\r\n  const matches=str.matchAll(regex);\r\n  let nextSubstrStart=0;\r\n  let strSoFar=\"\"\r\n  for(const match of matches){\r\n    strSoFar+=str.substring(nextSubstrStart, match.index);\r\n    strSoFar+=replaceFunc(match);\r\n    nextSubstrStart=match.index+match.length;\r\n  }\r\n  strSoFar+=str.substring(nextSubstrStart);\r\n  return strSoFar;\r\n};\r\n\r\nconst numberToExpNoTrailing=(number, maxLength, minExp=2 ) => {\r\n  const pow10=Math.floor(Math.abs(Math.log10(number)));\r\n  if(pow10<minExp){\r\n    return number.toPrecision(maxLength).replace(/(\\.\\d*?)0+$/,'$1').replace(/\\.$/, '');\r\n  } else {\r\n    return number.toExponential(maxLength-1).replace(/(\\.\\d*?)0+e/,'$1e').replace(/\\.e/, 'e').replace(/e\\+/, \"e\");\r\n  }\r\n}\r\nconst numberToExpWithTrailing=(number, maxLength, minExp=2 ) => {\r\n  const pow10=Math.floor(Math.abs(Math.log10(number)));\r\n  if(pow10<minExp){\r\n    return number.toPrecision(maxLength)\r\n  } else {\r\n    return number.toExponential(maxLength-1).replace(/e\\+/, \"e\");\r\n  }\r\n}\r\n\r\nexport { stringMatchAllReplace, numberToExpWithTrailing, numberToExpNoTrailing };","import React, { useCallback } from \"react\";\r\n\r\nimport memoize from 'fast-memoize';\r\nimport { stringMatchAllReplace } from \"../../../utils/string-utils.js\";\r\n\r\nconst chargeSignRegex=/(?<Charge>(?<ChargeSign>[+-])(?:(?:1|(?<ChargeValue>[2-9]))|(?<EndMatcher>$|[:\\s])))/g;\r\nconst chargeSignSwitcher=(match) => match.groups.ChargeValue+match.groups.ChargeSign;\r\nconst memoizedStringMatchAllReplace=memoize(stringMatchAllReplace);\r\nconst useComponentSearchFilter=(componentsDB) => {\r\n  return useCallback((componentId, inputValue) => {\r\n    const componentName=componentsDB().components.get(componentId).name;\r\n    return componentName.toLowerCase().includes(inputValue.toLowerCase()) || memoizedStringMatchAllReplace(componentName, chargeSignRegex, chargeSignSwitcher).toLowerCase().includes(inputValue.toLowerCase());\r\n  },[componentsDB]);\r\n};\r\n\r\nexport default useComponentSearchFilter;","\r\nimport React, { useState, useMemo } from 'react';\r\n\r\nimport List from \"react-virtualized/dist/commonjs/List\";\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\r\n\r\nimport * as Immutable from 'immutable';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport useComponentSearchFilter from \"./hooks/useComponentSearchFilter.js\"\r\n\r\nimport FormattedChemicalCompound from \"../../formatting/FormattedChemicalCompound.js\";\r\n\r\n\r\nconst ComponentSelectModal=React.memo((props) => {\r\n  const {componentsPresent, componentsDB, addComponents, windowHeight}=props;\r\n  const [modalIsOpen, setModalIsOpen]=useState(false);\r\n  const [componentsStaged, setComponentsStaged]=useState(Immutable.Set([]));\r\n  const [searchValue, setSearchValue]=useState(\"\");\r\n  const searchFilter=useComponentSearchFilter(componentsDB);\r\n  const componentsFiltered=useMemo(() => Array.from(componentsDB().components.filter((componentData, component) =>  {\r\n      return !componentsPresent.includes(component) && searchFilter(component, searchValue);\r\n  })), [componentsPresent, componentsDB, searchValue, searchFilter]);\r\n  const reset=() => {\r\n    setSearchValue(\"\");\r\n    setComponentsStaged(Immutable.Set([]));\r\n  }\r\n  return(\r\n    <>\r\n      <div className=\"hover-switch\" style={{\"width\" : \"15%\"}} onClick={() => setModalIsOpen(true)}>\r\n        <svg width=\"100%\" viewBox=\"0 0 16 16\" className=\"bi bi-plus-circle\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path fillRule=\"evenodd\" d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"></path>\r\n          <path fillRule=\"evenodd\" d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\"></path>\r\n        </svg>\r\n        <svg width=\"100%\" viewBox=\"0 0 16 16\" className=\"bi bi-plus-circle-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path fillRule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\"/>\r\n        </svg>\r\n      </div>\r\n      <Modal show={modalIsOpen} onHide={() =>{reset(); setModalIsOpen(false)}}>\r\n        <Modal.Header closeButton>\r\n          Add Components\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>\r\n                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-search\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <path fillRule=\"evenodd\" d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"/>\r\n                  <path fillRule=\"evenodd\" d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"/>\r\n                 </svg>\r\n                </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control placeholder=\"Search\" value={searchValue} onChange={(e) => {setSearchValue(e.target.value)}} className=\"sticky-top\"/>\r\n            {searchValue && <svg onClick={() => {setSearchValue(\"\")}} width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-x-circle-fill search-clearer\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path fillRule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z\"/>\r\n            </svg>}\r\n          </InputGroup>\r\n          <AutoSizer disableHeight>\r\n            {({width}) => <List \r\n              width={width}\r\n              height={windowHeight-120-80-16}\r\n              rowHeight={43}\r\n              overscanRowCount={10}\r\n              rowRenderer={({index, key, style}) => {\r\n                const component=componentsFiltered[index];\r\n                const isStaged=componentsStaged.includes(component[0]);\r\n                return (\r\n                  <div key={component[0]} style={style} className=\"p-2 d-flex align-items-center\">\r\n                    <span className=\"d-inline-block mr-auto\"><FormattedChemicalCompound>{component[1].name}</FormattedChemicalCompound></span>\r\n                    <Button onClick={() => {\r\n                        if(isStaged){\r\n                          setComponentsStaged(componentsStaged.delete(component[0]));\r\n                        } else {\r\n                          setComponentsStaged(componentsStaged.add(component[0]));\r\n                        }\r\n                      }}\r\n                      variant={isStaged ? \"secondary\" : \"primary\"} size=\"sm\">{isStaged ? \"Cancel\" : \"Add\"}\r\n                    </Button>\r\n                   \r\n                  </div>\r\n                )\r\n              }}\r\n              rowCount={componentsFiltered.length}\r\n            />}\r\n          </AutoSizer>\r\n          \r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={() => {reset(); addComponents(Array.from(componentsStaged)); setModalIsOpen(false);}}>\r\n            {componentsStaged.size ? \"Apply\" : \"Cancel\"}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default ComponentSelectModal;"],"sourceRoot":""}