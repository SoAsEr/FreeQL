{"version":3,"sources":["component_groups/components/hooks/useComponentSearchFilter.js","component_groups/components/ComponentSelect.js","formatting/FormattedChemicalCompound.js","utils/string-utils.js"],"names":["chargeSignRegex","chargeSignSwitcher","match","groups","ChargeValue","ChargeSign","memoizedStringMatchAllReplace","memoize","stringMatchAllReplace","useComponentSearchFilter","componentsDB","useCallback","componentId","inputValue","componentName","components","get","name","toLowerCase","includes","ComponentSelect","props","componentsPresent","addComponents","availableComponents","useMemo","Array","from","filter","componentData","map","value","label","searchFilter","options","filterOption","option","searchValue","formatOptionLabel","createFormatOptionLabel","FormattedChemicalCompound","onChange","e","React","memo","regex","children","matchAll","chargeValue","ChargeValue1","ChargeValue2","reduce","prev","curr","chargeSign","ChargeSign1","ChargeSign2","terminator","EndMatcher1","EndMatcher2","EndMatcher3","EndMatcher4","key","substring","index","WordMatcher","SubMatcher","str","replaceFunc","matches","nextSubstrStart","strSoFar","length","numberToExpWithTrailing","number","maxLength","minExp","pow10","Math","floor","abs","log10","toPrecision","toExponential","replace"],"mappings":"gJAKMA,EAAe,YAAC,0GAAD,oDACfC,EAAmB,SAACC,GAAD,OAAWA,EAAMC,OAAOC,YAAYF,EAAMC,OAAOE,YACpEC,EAA8BC,IAAQC,KAQ7BC,IAPgB,SAACC,GAC9B,OAAOC,uBAAY,SAACC,EAAaC,GAC/B,IAAMC,EAAcJ,IAAeK,WAAWC,IAAIJ,GAAaK,KAC/D,OAAOH,EAAcI,cAAcC,SAASN,EAAWK,gBAAkBZ,EAA8BQ,EAAed,EAAiBC,GAAoBiB,cAAcC,SAASN,EAAWK,iBAC7L,CAACR,M,gHCaUU,UAdO,SAACC,GAAW,IACzBC,EAAgDD,EAAhDC,kBAAmBZ,EAA6BW,EAA7BX,aAAca,EAAeF,EAAfE,cAElCC,EAAoBC,mBAAQ,kBAAMC,MAAMC,KAAKjB,IAAeK,WAC/Da,QAAO,SAACC,EAAejB,GAAhB,OAAiCU,EAAkBH,SAASP,OACnEkB,KAAI,yCAAmC,CAACC,MAApC,KAAwDC,MAAxD,KAA6Ef,WAClF,CAACP,EAAcY,IACXW,EAAaxB,YAAyBC,GAE5C,OACE,kBAAC,IAAD,CAAmBwB,QAASV,EAAqBW,aAAc,SAACC,EAAQC,GAAT,OAAyBJ,EAAaG,EAAOL,MAAOM,IAAcC,kBAAmBC,YAAwBC,KAA4BC,SAAU9B,uBAAY,SAAC+B,GAAUA,GAAInB,EAAc,CAACmB,EAAEX,UAAW,CAACR,IAAiBQ,MAAM,O,4DCnB/RS,EAA0BG,IAAMC,MAAK,SAACvB,GAW1C,IAAMwB,EAAK,YAAC,qdAAD,uKAEX,OACE,wBAASxB,EACJK,MAAMC,KAAKN,EAAMyB,SAASC,SAASF,IAAQf,KAAI,SAAC5B,GAC/C,IAAM8C,EAAY,CAAC9C,EAAMC,OAAO8C,aAAc/C,EAAMC,OAAO+C,cAAcC,QAAO,SAACC,EAAMC,GAAP,OAAgBA,GAAcD,IAAM,IAC9GE,EAAW,CAACpD,EAAMC,OAAOoD,YAAarD,EAAMC,OAAOqD,aAAaL,QAAO,SAACC,EAAMC,GAAP,OAAgBA,GAAcD,IAAM,IAC3GK,EAAW,CAACvD,EAAMC,OAAOuD,YAAaxD,EAAMC,OAAOwD,YAAazD,EAAMC,OAAOyD,YAAa1D,EAAMC,OAAO0D,aAAaV,QAAO,SAACC,EAAMC,GAAP,OAAgBA,GAAcD,IAAM,IACrK,OACE,0BAAMU,IAAKzC,EAAMyB,SAASiB,UAAU,EAAG7D,EAAM8D,QAC1C9D,EAAMC,OAAO8D,YAAY,6BAAM/D,EAAMC,OAAO+D,YAAiB,6BAAMlB,EAAaM,GAAkBG,UAQlGjB,O,gHC/BThC,EAAsB,SAAC2D,EAAKtB,EAAOuB,GACvC,IADuD,EACjDC,EAAQF,EAAIpB,SAASF,GACvByB,EAAgB,EAChBC,EAAS,GAH0C,cAIpCF,GAJoC,IAIvD,IAAI,EAAJ,qBAA2B,CAAC,IAAlBnE,EAAiB,QACzBqE,GAAUJ,EAAIJ,UAAUO,EAAiBpE,EAAM8D,OAC/CO,GAAUH,EAAYlE,GACtBoE,EAAgBpE,EAAM8D,MAAM9D,EAAMsE,QAPmB,8BAUvD,OADAD,GAAUJ,EAAIJ,UAAUO,IAYpBG,EAAwB,SAACC,EAAQC,GAA0B,IAAfC,EAAc,uDAAP,EACjDC,EAAMC,KAAKC,MAAMD,KAAKE,IAAIF,KAAKG,MAAMP,KAC3C,OAAGG,EAAMD,EACAF,EAAOQ,YAAYP,GAEnBD,EAAOS,cAAcR,EAAU,GAAGS,QAAQ,MAAO","file":"static/js/12.6e48b970.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\r\n\r\nimport memoize from 'fast-memoize';\r\nimport { stringMatchAllReplace } from \"../../../utils/string-utils.js\";\r\n\r\nconst chargeSignRegex=/(?<Charge>(?<ChargeSign>[+-])(?:(?:1|(?<ChargeValue>[2-9]))|(?<EndMatcher>$|[:\\s])))/g;\r\nconst chargeSignSwitcher=(match) => match.groups.ChargeValue+match.groups.ChargeSign;\r\nconst memoizedStringMatchAllReplace=memoize(stringMatchAllReplace);\r\nconst useComponentSearchFilter=(componentsDB) => {\r\n  return useCallback((componentId, inputValue) => {\r\n    const componentName=componentsDB().components.get(componentId).name;\r\n    return componentName.toLowerCase().includes(inputValue.toLowerCase()) || memoizedStringMatchAllReplace(componentName, chargeSignRegex, chargeSignSwitcher).toLowerCase().includes(inputValue.toLowerCase());\r\n  },[componentsDB]);\r\n};\r\n\r\nexport default useComponentSearchFilter;","import React, { useCallback,  useMemo } from 'react';\r\n\r\n\r\nimport VirtualizedSelect from \"react-select-virtualized\";\r\n\r\nimport useComponentSearchFilter from \"./hooks/useComponentSearchFilter.js\"\r\n\r\nimport { createFormatOptionLabel } from '../../utils/react-select-utils.js';\r\n\r\nimport FormattedChemicalCompound from \"../../formatting/FormattedChemicalCompound.js\";\r\n\r\nconst ComponentSelect=(props) => {  \r\n  const {componentsPresent, componentsDB, addComponents}=props;\r\n  \r\n  const availableComponents=useMemo(() => Array.from(componentsDB().components\r\n    .filter((componentData, componentId) => !componentsPresent.includes(componentId)))\r\n    .map(([componentId, componentData]) => ({value: componentId, label: componentData.name}))\r\n  , [componentsDB, componentsPresent])\r\n  const searchFilter=useComponentSearchFilter(componentsDB);\r\n\r\n  return(\r\n    <VirtualizedSelect options={availableComponents} filterOption={(option, searchValue) => searchFilter(option.value, searchValue)} formatOptionLabel={createFormatOptionLabel(FormattedChemicalCompound)} onChange={useCallback((e) => {if(e) {addComponents([e.value])}}, [addComponents])} value=\"\"/>\r\n  )\r\n};\r\n\r\nexport default ComponentSelect;","import React from \"react\";\r\n\r\nconst FormattedChemicalCompound=React.memo((props) => {\r\n  /*\r\n  WordMatcher=(.*?[^0-9\\[\\(])\r\n  SubMatcher=([0-9])\r\n  EndMatcher=([$\\s])\r\n  SupMatcher=([+-])(?:(?:1|([2-9]))|{EndMatcher})\r\n  WholeExp={WordMatcher}(?:{EndMatcher}|{SubMatcher}{SupMatcher}?|{SupMatcher})\r\n  (WordMatcher[0])_(SubMatcher[0])^(SupMatcher[1]SupMatcher[0])EndMatcher[0]\r\n  That would only work with ruby where the capture groups are changed on every recursion\r\n  */\r\n  //https://regex101.com/r/POrbvL/4\r\n  const regex=/(?<WordMatcher>.*?[^0-9[(\\s])(?:(?<EndMatcher1>$|[:.\\s])|(?<Charge1>(?<ChargeSign1>[+-])(?:(?:1|(?<ChargeValue1>[2-9]))|(?<EndMatcher2>$|[:.\\s])))|(?<SubMatcher>[0-9]+)(?<Charge2>(?<ChargeSign2>[+-])(?:(?:1|(?<ChargeValue2>[2-9]))|(?<EndMatcher3>$|[:.\\s])))?)(?<EndMatcher4>$|[:.\\s])?/g;\r\n  //$<WordMatcher>_($<SubMatcher>)^($<ChargeValue1>$<ChargeValue2>$<ChargeSign1>$<ChargeSign2>)$<EndMatcher1>$<EndMatcher2>$<EndMatcher3>\r\n  return(\r\n    <div {...props}>\r\n        {Array.from(props.children.matchAll(regex)).map((match) => {\r\n          const chargeValue=[match.groups.ChargeValue1, match.groups.ChargeValue2].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          const chargeSign=[match.groups.ChargeSign1, match.groups.ChargeSign2].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          const terminator=[match.groups.EndMatcher1, match.groups.EndMatcher2, match.groups.EndMatcher3, match.groups.EndMatcher4].reduce((prev, curr) => curr ? curr : prev, \"\");\r\n          return (\r\n            <span key={props.children.substring(0, match.index)}>\r\n              {match.groups.WordMatcher}<sub>{match.groups.SubMatcher}</sub><sup>{chargeValue}{chargeSign}</sup>{terminator}\r\n            </span>\r\n          );\r\n        })\r\n        }\r\n    </div>\r\n  );\r\n});\r\nexport default FormattedChemicalCompound;","const stringMatchAllReplace=(str, regex, replaceFunc) => {\r\n  const matches=str.matchAll(regex);\r\n  let nextSubstrStart=0;\r\n  let strSoFar=\"\"\r\n  for(const match of matches){\r\n    strSoFar+=str.substring(nextSubstrStart, match.index);\r\n    strSoFar+=replaceFunc(match);\r\n    nextSubstrStart=match.index+match.length;\r\n  }\r\n  strSoFar+=str.substring(nextSubstrStart);\r\n  return strSoFar;\r\n};\r\n\r\nconst numberToExpNoTrailing=(number, maxLength, minExp=2 ) => {\r\n  const pow10=Math.floor(Math.abs(Math.log10(number)));\r\n  if(pow10<minExp){\r\n    return number.toPrecision(maxLength).replace(/(\\.\\d*?)0+$/,'$1').replace(/\\.$/, '');\r\n  } else {\r\n    return number.toExponential(maxLength-1).replace(/(\\.\\d*?)0+e/,'$1e').replace(/\\.e/, 'e').replace(/e\\+/, \"e\");\r\n  }\r\n}\r\nconst numberToExpWithTrailing=(number, maxLength, minExp=2 ) => {\r\n  const pow10=Math.floor(Math.abs(Math.log10(number)));\r\n  if(pow10<minExp){\r\n    return number.toPrecision(maxLength)\r\n  } else {\r\n    return number.toExponential(maxLength-1).replace(/e\\+/, \"e\");\r\n  }\r\n}\r\n\r\nexport { stringMatchAllReplace, numberToExpWithTrailing, numberToExpNoTrailing };"],"sourceRoot":""}